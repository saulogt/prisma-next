// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    // previewFeatures = ["jsonProtocol"]
}

// generator erd {
//   provider = "prisma-erd-generator"
//   output = "../ERD.png"
// }

datasource db {
    provider     = "postgresql"
    url          = env("DATABASE_URL")
    relationMode = "foreignKeys"
}


model Patient {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  address2   String?
  city      String?
  state     String?
  zip       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // ...

  externalId1 String?
  externalId2 String?

  uploads   Upload[]

  org       Org      @relation(fields: [orgId], references: [id])
  orgId     String
  
  measurements Measurement[]
  
  client    Client?  @relation(fields: [clientId], references: [id])
  clientId  String?
  
  //TODO: Add a default measurement to be pinned

  /// ======

  @@index([email])

  @@index([externalId1])
  @@index([externalId2])

}

model Photo {
    id        String   @id @default(cuid())
    url       String?

    bucket    String
    key       String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    upload    Upload   @relation(fields: [uploadId], references: [id])
    uploadId  String
    
}

/// Groups photos together
model Upload {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    photos    Photo[]

    org       Org      @relation(fields: [orgId], references: [id])
    orgId     String

    patient    Patient?   @relation(fields: [patientId], references: [id])
    patientId  String?
}

/// Measurement took from a photo
model Measurement {
    id        String   @id @default(cuid())
    
    dnpl       Float
    dnpr       Float
    dp         Float
    basel      Float
    baser      Float
    
    patient    Patient  @relation(fields: [patientId], references: [id])
    patientId  String @unique
}

model Org {
    id      String @id @default(cuid())
    owner   User   @relation(fields: [ownerId], references: [id])
    ownerId String @unique

    name      String?
    patients Patient[]
    uploads Upload[]
    clients   Client[]

    settingsId  String? @unique
    settings    Settings? @relation(fields: [settingsId], references: [id])
    
}

/// Auth schema
model User {
  id    String     @id @default(cuid())
  email String  @unique
  name  String?
  // ...

  org   Org?
}

model Client {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique  /// Randomly generated email iun case of SITE type
  phone     String?
  address   String?
  address2   String?
  city      String?
  state     String?
  zip       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      ClientType @default(PARTNER)

  org      Org? @relation(fields: [orgId], references: [id])
  orgId    String?
  patients  Patient[]

  clientLinks ClientLink[]

  settingsId  String? @unique
  settings    Settings? @relation(fields: [settingsId], references: [id])
}

enum ClientType {
  SITE
  PARTNER
}

model Settings {
  id        String   @id @default(cuid())
  
  externalIdName1 String?
  externalIdName2 String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  client Client?
  org    Org?
}

model ClientLink {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  validUntil DateTime?

  email     String?

  client    Client   @relation(fields: [clientId], references: [id])
  clientId  String

  @@index([email])
  
}



